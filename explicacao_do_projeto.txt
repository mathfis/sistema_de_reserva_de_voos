EXPLICAÇÃO DO PROJETO – SISTEMA DE RESERVA DE VOOS (VERSÃO FINAL - AD2)
1. ESTRUTURA GERAL

O projeto é um sistema de reservas de voos desenvolvido em Python, utilizando programação orientada a objetos e persistência de dados em arquivos texto.
Nesta versão, foi implementada também uma interface gráfica (GUI) em Tkinter e um módulo de testes automatizados que valida o funcionamento de todas as partes do sistema.

A estrutura do projeto é organizada em dois níveis principais:

biblioteca/ -> contém os módulos do backend:
usuarios.py, avioes.py e voos.py.

main_gui.py -> programa principal com a interface gráfica.

teste_backend.py -> programa que executa testes automáticos de todas as classes.

dados/ -> contém os arquivos persistentes usuarios.txt, avioes.txt e voos.txt.

2. MÓDULOS DO BACKEND
Classe Aviao (avioes.py)

Representa uma aeronave disponível no sistema.

Armazena identificador, modelo, número de fileiras e assentos por fileira.

O método gerar_layout() cria um dicionário com todos os assentos do avião, indicando:

posição (janela, meio, corredor);

classe (primeira, executiva, econômica);

se o assento é de emergência;

valor e bloqueio.

Possui método validar_assento() que confirma se um assento existe.

Funções auxiliares carregar_avioes() e salvar_avioes() fazem a leitura e gravação no arquivo avioes.txt.

Classe Usuario (usuarios.py)

Modela o passageiro cadastrado.

Contém CPF, nome, data de nascimento, e-mail e senha.

Mantém uma lista de reservas (self.reservas) contendo voo, assento e status.

Métodos principais:

criar_reserva() — adiciona uma nova reserva com validações de idade e duplicidade.

cancelar_reserva() — marca uma reserva como cancelada.

modificar_reserva() — permite alterar voo e assento de uma reserva existente.

eh_maior_de_idade() e calcular_idade() — aplicam a regra que proíbe menores de 18 anos de ocuparem assentos de emergência.

Funções carregar_usuarios(), salvar_usuarios() e salvar_usuario_unico() controlam a persistência no arquivo usuarios.txt.

Classe Voo (voos.py)

Representa um voo da companhia aérea.

Atributos: identificador, avião associado, origem, destino, data/hora e assentos reservados.

Principais métodos:

reservar_assento(usuario, assento_id) — efetua a reserva com todas as validações de regras.

confirmar_reserva() — registra formalmente o vínculo entre passageiro e assento.

cancelar_reserva() — remove a associação entre CPF e assento.

listar_assentos() — exibe todos os assentos e seus status (livre ou reservado).

to_string() e from_string() — fazem a serialização e desserialização dos voos no arquivo voos.txt.

As reservas são gravadas no formato assento:cpf.

Classe GerenciadorVoos (voos.py)

Gerencia o conjunto de voos do sistema.

Permite carregar, salvar, listar e buscar voos, mantendo consistência com uso de arquivo lock.

As funções carregar_voos() e salvar_voos() mantêm integridade de gravação em disco.

Utiliza o arquivo dados/voos.txt para armazenamento persistente.

3. INTERFACE GRÁFICA (ARQUIVO main_gui.py)

Implementada com Tkinter, a interface substitui a antiga linha de comando da AD1.
Ela permite operação completa do sistema, desde o cadastro de usuários até o cancelamento de reservas.

As telas são organizadas em classes:

TelaLogin — login de passageiro, com validação de CPF e senha.

TelaCadastro — cadastro de novos usuários e verificação de duplicidade.

TelaPainel — painel principal do usuário com visualização de dados e reservas.

TelaVoos — exibe todos os voos disponíveis e permite selecionar um.

TelaAssentos — mostra o layout dos assentos do voo selecionado, permitindo confirmar reservas.

Todas as telas compartilham os dados centrais de:

lista_avioes

gerenciador_voos

usuario_logado

voo_selecionado

Os arquivos de dados são automaticamente atualizados a cada reserva ou cancelamento.

4. MÓDULO DE TESTE AUTOMATIZADO (teste_backend.py)

Esse arquivo executa uma bateria de testes automáticos sobre todas as classes do backend.
Ele:

Cria um ambiente temporário com arquivos simulados de aviões, voos e usuários.

Valida a criação de objetos, reservas, cancelamentos e regras de idade.

Testa cenários complexos com múltiplos passageiros e modificações de reserva.

Ao final, exibe um resumo indicando o sucesso dos testes.

Esse módulo garante que todas as regras de negócio e persistência funcionam de forma correta.

5. FORMATOS DE DADOS

avioes.txt
aviao_id;modelo;fileiras;assentos_por_fileira
Exemplo:
A320;Airbus A320;30;6

voos.txt
voo_id;aviao_id;origem;destino;data_hora;assento:cpf
Exemplo:
V001;A320;SP;RJ;2025-12-15 14:00;9F:123.456.789-00

usuarios.txt
cpf;nome;data_nascimento;email;senha;reservas
Reservas: pares voo_id-assento separados por vírgula.
Exemplo:
123.456.789-00;Teste;01/01/1990;teste@teste.com;1234;V001-9F,V002-10A

6. CONCLUSÃO

O sistema final da AD2 implementa:

Estrutura de classes completa e coesa;

Regras de negócio aplicadas integralmente;

Persistência segura em arquivos texto;

Interface gráfica interativa e funcional;

Módulo de testes automatizado validando toda a lógica.

Trata-se de uma evolução completa da versão anterior (AD1), agora com controle visual, gerenciamento persistente de usuários e voos, e verificação de integridade em tempo real.
Todos os arquivos fornecidos no envio são necessários para o funcionamento integral e a avaliação do sistema.